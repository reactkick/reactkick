# .github/workflows/main.yml

name: Reactkick CI/CD

# Workflow'un ne zaman çalışacağını belirleyen tetikleyiciler
on:
  push:
    branches: [ main ] # main dalına push yapıldığında
  pull_request:
    branches: [ main ] # main dalına pull request açıldığında veya güncellendiğinde

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest # Çalıştırılacak sanal makine ortamı

    strategy:
      matrix:
        node-version: [18.x, 20.x] # Farklı Node.js versiyonlarında test edebilirsiniz
        # Örnek olarak sadece 18.x kullanmak için: node-version: [18.x]

    steps:
      # 1. Adım: Kodu Repository'den Çekme
      - name: Checkout repository
        uses: actions/checkout@v4 # GitHub'ın resmi checkout action'ı

      # 2. Adım: Belirtilen Node.js Versiyonunu Kurma
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm' # 'npm' veya 'yarn' için bağımlılıkları cache'le

      # 3. Adım: Bağımlılıkları Yükleme
      # package-lock.json veya yarn.lock kullanıyorsanız 'npm ci' veya 'yarn install --frozen-lockfile' daha iyidir.
      - name: Install dependencies
        run: npm ci # Eğer yarn kullanıyorsanız: yarn install --frozen-lockfile

      # 4. Adım: Linting (Opsiyonel - package.json'da "lint" script'i varsa)
      # Eğer lint script'iniz yoksa veya çalıştırmak istemiyorsanız bu adımı silebilirsiniz.
      - name: Run linter
        run: npm run lint # Eğer yarn kullanıyorsanız: yarn lint
        # `continue-on-error: true` ekleyerek lint hatalarında workflow'un durmasını engelleyebilirsiniz,
        # ancak genellikle hataların düzeltilmesi tercih edilir.

      # 5. Adım: Testleri Çalıştırma (Opsiyonel - package.json'da "test" script'i varsa)
      # Eğer test script'iniz yoksa veya çalıştırmak istemiyorsanız bu adımı silebilirsiniz.
      - name: Run tests
        run: npm test # Eğer yarn kullanıyorsanız: yarn test

      # 6. Adım: Projeyi Build Etme
      - name: Build project
        run: npm run build # Eğer yarn kullanıyorsanız: yarn build
        # Ortam değişkenleri gerekiyorsa burada tanımlayabilirsiniz, örn:
        # env:
        #   CI: false # Create React App için bazı uyarıları hata olarak görmesini engeller
        #   REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}

      # 7. Adım (Opsiyonel): Build Edilmiş Dosyaları Artifact Olarak Kaydetme
      # Bu, build sonucunu daha sonra başka bir job'da (örneğin deploy) kullanmak veya indirmek için yararlıdır.
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-output-${{ matrix.node-version }} # Artifact adı
          path: build/ # Build edilen dosyaların bulunduğu klasör (Create React App için genellikle 'build')
                      # Next.js için '.next/' veya Vite için 'dist/' olabilir. Projenize göre ayarlayın.

  # (Opsiyonel) Deploy Job'ı - Sadece main dalına push yapıldığında çalışır
  # deploy:
  #   name: Deploy to GitHub Pages (Örnek)
  #   needs: build_and_test # build_and_test job'ı başarılı olursa çalışır
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Sadece main dalına push ise

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Download build artifact
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: build-output-18.x # Hangi Node versiyonu ile build edilen artifact'i kullanacağınızı belirtin
  #         path: build/

  #     - name: Deploy to GitHub Pages
  #       uses: peaceiris/actions-gh-pages@v3
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         publish_dir: ./build # Build klasörünüz

# Gemini Uygulaması ile İlgili Notlar:
# Eğer "Gemini uygulaması" GitHub workflow'larını yönetmek için bir CLI aracı, API veya başka bir entegrasyon gerektiriyorsa:
# 1. Gerekli API anahtarlarını GitHub Secrets olarak ekleyin (Settings > Secrets and variables > Actions).
# 2. Workflow'unuza bu aracı kurmak veya API'ye istek atmak için bir 'run' adımı ekleyin.
# Örnek:
#      - name: Run Gemini Tool
#        run: |
#          # Gemini aracını yükle (eğer gerekiyorsa)
#          # npm install -g gemini-cli
#          # Gemini aracını çalıştır
#          # gemini-cli analyze --apiKey ${{ secrets.GEMINI_API_KEY }}
#        env:
#          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }} # Gizli anahtarı ortam değişkeni olarak ata
